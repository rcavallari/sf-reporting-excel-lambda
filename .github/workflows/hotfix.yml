name: Hotfix Deployment

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Hotfix branch to deploy'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - 'development'
          - 'production'
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean
      reason:
        description: 'Reason for hotfix deployment'
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate inputs
      run: |
        echo "üö® HOTFIX DEPLOYMENT INITIATED"
        echo "Branch: ${{ github.event.inputs.branch }}"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Skip tests: ${{ github.event.inputs.skip_tests }}"
        echo "Reason: ${{ github.event.inputs.reason }}"
        
        # Validate branch name follows hotfix convention
        if [[ ! "${{ github.event.inputs.branch }}" =~ ^hotfix/.+ ]]; then
          echo "‚ùå Branch name must start with 'hotfix/'"
          exit 1
        fi
        
        # Ensure reason is provided
        if [ -z "${{ github.event.inputs.reason }}" ]; then
          echo "‚ùå Reason for hotfix must be provided"
          exit 1
        fi
        
        echo "‚úÖ Validation passed"

  emergency-tests:
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
    - name: Checkout hotfix branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run critical tests only
      run: |
        echo "Running critical tests for hotfix..."
        yarn lint || echo "Linting failed - proceeding anyway for hotfix"
        yarn test || echo "Tests failed - check if this is acceptable for hotfix"
        
        # Package to ensure no build errors
        yarn package
      env:
        NODE_ENV: test
        BUCKET: test-bucket
        IMAGES_BUCKET: test-images-bucket

  deploy-hotfix:
    runs-on: ubuntu-latest
    needs: [validate, emergency-tests]
    if: always() && needs.validate.result == 'success' && (needs.emergency-tests.result == 'success' || needs.emergency-tests.result == 'skipped')
    
    environment:
      name: ${{ github.event.inputs.environment }}
      url: ${{ steps.deploy.outputs.endpoint }}
    
    steps:
    - name: Checkout hotfix branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ github.event.inputs.environment == 'production' && secrets.PROD_AWS_ACCESS_KEY_ID || secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ github.event.inputs.environment == 'production' && secrets.PROD_AWS_SECRET_ACCESS_KEY || secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
    
    - name: Deploy hotfix
      id: deploy
      run: |
        STAGE=${{ github.event.inputs.environment == 'production' && 'prod' || 'dev' }}
        echo "Deploying hotfix to $STAGE environment..."
        
        yarn deploy --stage $STAGE
        
        echo "endpoint=$(serverless info --stage $STAGE --verbose | grep -o 'https://[^[:space:]]*')" >> $GITHUB_OUTPUT
      env:
        BUCKET: ${{ github.event.inputs.environment == 'production' && vars.PROD_BUCKET || vars.DEV_BUCKET }}
        IMAGES_BUCKET: ${{ github.event.inputs.environment == 'production' && vars.PROD_IMAGES_BUCKET || vars.DEV_IMAGES_BUCKET }}
    
    - name: Verify hotfix deployment
      run: |
        # Wait for deployment to stabilize
        sleep 30
        
        # Test health endpoint
        ENDPOINT=$(serverless info --stage ${{ github.event.inputs.environment == 'production' && 'prod' || 'dev' }} --verbose | grep -o 'https://[^[:space:]]*')
        
        echo "Testing hotfix endpoint: $ENDPOINT"
        
        # Retry health check up to 3 times for hotfix
        for i in {1..3}; do
          if curl -f "${ENDPOINT}/health"; then
            echo "‚úÖ Hotfix health check passed on attempt $i"
            break
          elif [ $i -eq 3 ]; then
            echo "‚ùå Hotfix health check failed after 3 attempts"
            exit 1
          else
            echo "Health check failed on attempt $i, retrying in 20s..."
            sleep 20
          fi
        done
    
    - name: Create hotfix deployment record
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentData = {
            environment: '${{ github.event.inputs.environment }}',
            branch: '${{ github.event.inputs.branch }}',
            reason: '${{ github.event.inputs.reason }}',
            tests_skipped: '${{ github.event.inputs.skip_tests }}',
            endpoint: '${{ steps.deploy.outputs.endpoint }}',
            deployed_at: new Date().toISOString(),
            deployed_by: '${{ github.actor }}'
          };
          
          const title = `üö® HOTFIX DEPLOYED: ${{ github.event.inputs.branch }}`;
          const body = `
          ## Hotfix Deployment Record
          
          **‚ö†Ô∏è This was an emergency hotfix deployment**
          
          ### Details
          - **Branch**: \`${{ github.event.inputs.branch }}\`
          - **Environment**: ${{ github.event.inputs.environment }}
          - **Endpoint**: ${{ steps.deploy.outputs.endpoint }}
          - **Deployed by**: @${{ github.actor }}
          - **Deployed at**: ${deploymentData.deployed_at}
          - **Tests skipped**: ${{ github.event.inputs.skip_tests }}
          
          ### Reason
          ${{ github.event.inputs.reason }}
          
          ### Post-Deployment Actions Required
          - [ ] Monitor application for issues
          - [ ] Merge hotfix branch back to main/develop
          - [ ] Create proper release after validation
          - [ ] Update documentation if needed
          - [ ] Notify stakeholders of deployment
          
          ### Rollback Instructions
          If issues are detected, rollback can be performed by:
          1. Re-running the previous successful deployment
          2. Or reverting the hotfix branch and redeploying
          
          *This record was automatically created by the hotfix workflow.*
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['hotfix', 'deployment', 'urgent']
          });
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ HOTFIX DEPLOYMENT SUCCESSFUL!"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Endpoint: ${{ steps.deploy.outputs.endpoint }}"
          echo "Branch: ${{ github.event.inputs.branch }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
        else
          echo "üí• HOTFIX DEPLOYMENT FAILED!"
          echo "Check logs and consider manual intervention"
          exit 1
        fi