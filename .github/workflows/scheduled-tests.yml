name: Scheduled Health Checks

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  health-check-dev:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
    
    - name: Test development environment
      run: |
        ENDPOINT=$(serverless info --stage dev --verbose | grep -o 'https://[^[:space:]]*')
        echo "Testing endpoint: $ENDPOINT"
        
        # Health check
        curl -f "${ENDPOINT}/health" || exit 1
        
        # Test with sample data (if endpoint accepts it)
        if [ -f "test/sample-event.json" ]; then
          echo "Running sample test..."
          yarn invoke:remote || echo "Sample test failed (may be expected)"
        fi
      env:
        BUCKET: ${{ vars.DEV_BUCKET }}
        IMAGES_BUCKET: ${{ vars.DEV_IMAGES_BUCKET }}

  health-check-prod:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}
    
    - name: Test production environment
      run: |
        ENDPOINT=$(serverless info --stage prod --verbose | grep -o 'https://[^[:space:]]*')
        echo "Testing production endpoint: $ENDPOINT"
        
        # Health check with timeout
        timeout 30 curl -f "${ENDPOINT}/health" || exit 1
        
        echo "âœ… Production health check passed"
      env:
        BUCKET: ${{ vars.PROD_BUCKET }}
        IMAGES_BUCKET: ${{ vars.PROD_IMAGES_BUCKET }}

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run security audit
      run: |
        echo "Running security audit..."
        yarn audit --level moderate --json > audit-results.json || true
        
        # Check for critical vulnerabilities
        if yarn audit --level critical --json | grep -q '"type":"auditSummary".*"critical":[1-9]'; then
          echo "ðŸš¨ Critical security vulnerabilities found!"
          yarn audit --level critical
          exit 1
        else
          echo "âœ… No critical vulnerabilities found"
        fi
    
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json
        retention-days: 30