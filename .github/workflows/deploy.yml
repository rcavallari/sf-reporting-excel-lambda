name: Deploy Lambda Function

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event.inputs.force_deploy != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run tests
      run: yarn test
      env:
        NODE_ENV: test

  deploy:
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || github.event.inputs.force_deploy == 'true')
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.endpoint }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.REGION || 'us-west-2' }}
    
    - name: Deploy to AWS Lambda
      id: deploy
      run: |
        yarn deploy
        echo "endpoint=$(serverless info --verbose | grep -o 'https://[^[:space:]]*')" >> $GITHUB_OUTPUT
      env:
        BUCKET: ${{ vars.BUCKET }}
        IMAGES_BUCKET: ${{ vars.IMAGES_BUCKET }}
        IMAGES_REGION: us-east-1
        REGION: ${{ vars.REGION || 'us-west-2' }}
        NODE_ENV: production
        LOG_LEVEL: INFO
    
    - name: Run post-deployment health check
      run: |
        # Wait for Lambda to be ready
        sleep 30
        
        # Test health check endpoint
        ENDPOINT=$(serverless info --verbose | grep -o 'https://[^[:space:]]*')
        
        # Retry health check up to 3 times
        for i in {1..3}; do
          if curl -f "${ENDPOINT}/health"; then
            echo "Health check passed on attempt $i"
            break
          elif [ $i -eq 3 ]; then
            echo "Health check failed after 3 attempts"
            exit 1
          else
            echo "Health check failed on attempt $i, retrying in 15s..."
            sleep 15
          fi
        done
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "ðŸš€ Lambda deployment successful!"
          echo "Function: report-excel-lambda"
          echo "Endpoint: ${{ steps.deploy.outputs.endpoint }}"
        else
          echo "ðŸ’¥ Lambda deployment failed!"
          exit 1
        fi